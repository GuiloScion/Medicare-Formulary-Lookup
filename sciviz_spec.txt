# SciViz-Edu: Technical Specification
**Version 1.0 | January 2025**

## Executive Summary

SciViz-Edu is an open-source Python framework for creating interactive, assessment-integrated scientific educational content. It bridges the gap between static educational animations (Manim) and fully interactive simulations by providing a unified toolkit for educators and researchers to build engaging, pedagogically sound learning experiences.

---

## 1. System Architecture

### 1.1 High-Level Design

```
┌─────────────────────────────────────────────────────────────┐
│                    SciViz-Edu Framework                      │
├─────────────────────────────────────────────────────────────┤
│                                                               │
│  ┌──────────────┐  ┌──────────────┐  ┌──────────────┐      │
│  │   Manim++    │  │  Interactive │  │  Assessment  │      │
│  │   Engine     │◄─┤   Engine     │◄─┤   Engine     │      │
│  └──────────────┘  └──────────────┘  └──────────────┘      │
│         │                  │                  │              │
│         └──────────────────┴──────────────────┘              │
│                            │                                 │
│                   ┌────────▼────────┐                        │
│                   │  Knowledge Graph │                        │
│                   │  & Learning Path │                        │
│                   └─────────────────┘                        │
│                            │                                 │
│         ┌──────────────────┴──────────────────┐              │
│         │                                       │              │
│  ┌──────▼──────┐                      ┌────────▼────────┐   │
│  │   Export    │                      │   Analytics     │   │
│  │   Pipeline  │                      │   Dashboard     │   │
│  └─────────────┘                      └─────────────────┘   │
│                                                               │
└─────────────────────────────────────────────────────────────┘
```

### 1.2 Core Components

#### **Manim++ Engine**
- Enhanced Manim with educational templates
- Scene timing coordination
- Narrative management
- Parametric visualization controls
- Memory-efficient rendering

#### **Interactive Engine**
- Web-based interactivity layer (Three.js + React)
- Real-time parameter manipulation
- Simulation controls (play/pause/step/reset)
- State synchronization
- User interaction tracking

#### **Assessment Engine**
- Embedded quiz system
- Automatic grading
- Formative assessment checkpoints
- Adaptive difficulty
- Progress tracking

#### **Knowledge Graph**
- Concept dependency mapping
- Learning pathway optimization
- Prerequisite checking
- Related concept suggestions

#### **Export Pipeline**
- Static video export (MP4, WebM)
- Interactive web export (HTML5)
- SCORM package generation
- Jupyter notebook integration

#### **Analytics Dashboard**
- Student progress tracking
- Engagement metrics
- Concept mastery visualization
- Educator insights

---

## 2. Module Structure

```
sciviz_edu/
├── __init__.py
├── core/
│   ├── __init__.py
│   ├── config.py              # Global configuration
│   ├── scene.py               # Base educational scene class
│   ├── narrative.py           # Subtitle/narration management
│   └── export.py              # Export pipeline
│
├── manim_extensions/
│   ├── __init__.py
│   ├── templates/
│   │   ├── __init__.py
│   │   ├── networks.py        # Network visualization templates
│   │   ├── physics.py         # Physics simulation templates
│   │   ├── chemistry.py       # Molecular visualization
│   │   ├── mathematics.py     # Mathematical concepts
│   │   └── systems.py         # Complex systems
│   ├── effects/
│   │   ├── __init__.py
│   │   ├── particles.py       # Particle systems
│   │   ├── glow.py            # Glow effects
│   │   └── transitions.py     # Scene transitions
│   └── utils/
│       ├── __init__.py
│       ├── color_schemes.py   # Consistent palettes
│       └── timing.py          # Scene timing helpers
│
├── interactive/
│   ├── __init__.py
│   ├── web_engine.py          # Web interactivity core
│   ├── bindings.py            # Python-JavaScript bridge
│   ├── controls.py            # Interactive controls
│   └── templates/
│       ├── base.html
│       └── components/
│
├── assessment/
│   ├── __init__.py
│   ├── quiz.py                # Quiz generation
│   ├── grading.py             # Auto-grading system
│   ├── feedback.py            # Feedback generation
│   └── analytics.py           # Assessment analytics
│
├── knowledge/
│   ├── __init__.py
│   ├── graph.py               # Knowledge graph structure
│   ├── pathways.py            # Learning path optimization
│   └── prerequisites.py       # Dependency resolution
│
├── templates/
│   ├── networks/
│   │   ├── __init__.py
│   │   ├── biological.py      # Biological networks
│   │   ├── neural.py          # Neural networks
│   │   └── social.py          # Social networks
│   ├── physics/
│   │   ├── __init__.py
│   │   ├── mechanics.py       # Classical mechanics
│   │   ├── electromagnetism.py
│   │   └── quantum.py
│   ├── chemistry/
│   │   ├── __init__.py
│   │   ├── molecular.py       # Molecular structures
│   │   └── reactions.py       # Chemical reactions
│   └── systems/
│       ├── __init__.py
│       ├── dynamical.py       # Dynamical systems
│       └── game_theory.py
│
├── cli/
│   ├── __init__.py
│   ├── create.py              # Project creation
│   ├── render.py              # Rendering commands
│   └── serve.py               # Development server
│
└── examples/
    ├── mycorrhizal_networks/
    ├── neural_networks/
    ├── particle_physics/
    └── chemical_kinetics/
```

---

## 3. Key Technologies

### 3.1 Backend (Python)
- **Manim Community v0.18+**: Animation engine
- **NumPy/SciPy**: Scientific computing
- **NetworkX**: Graph structures
- **SymPy**: Symbolic mathematics
- **FastAPI**: Web API for interactivity
- **SQLAlchemy**: Analytics database
- **Pydantic**: Data validation

### 3.2 Frontend (JavaScript/TypeScript)
- **React 18**: UI framework
- **Three.js**: 3D graphics
- **D3.js**: Data visualization
- **TailwindCSS**: Styling
- **Vite**: Build tooling

### 3.3 Infrastructure
- **Docker**: Containerization
- **GitHub Actions**: CI/CD
- **Sphinx**: Documentation
- **pytest**: Testing

---

## 4. Data Models

### 4.1 Educational Scene

```python
class EducationalScene:
    """Base class for all educational scenes"""
    
    # Metadata
    scene_id: str
    title: str
    description: str
    duration: float
    
    # Learning objectives
    objectives: List[LearningObjective]
    prerequisites: List[str]
    difficulty: DifficultyLevel
    
    # Content
    narrative: NarrativeTimeline
    visuals: List[VisualElement]
    interactions: List[InteractiveElement]
    assessments: List[AssessmentCheckpoint]
    
    # Knowledge graph
    concepts: List[Concept]
    relationships: List[ConceptRelation]
```

### 4.2 Learning Objective

```python
class LearningObjective:
    """Specific learning outcome"""
    
    id: str
    description: str
    bloom_level: BloomLevel  # Remember, Understand, Apply, Analyze, Evaluate, Create
    assessment_method: str
    success_criteria: Dict[str, Any]
```

### 4.3 Interactive Element

```python
class InteractiveElement:
    """Interactive component within a scene"""
    
    id: str
    type: InteractionType  # Slider, Button, Toggle, Input
    target: str  # What parameter it controls
    range: Tuple[float, float]
    default: float
    callback: Callable
    learning_hook: Optional[str]  # Ties to learning objective
```

### 4.4 Assessment Checkpoint

```python
class AssessmentCheckpoint:
    """Assessment point within a scene"""
    
    timestamp: float
    question: Question
    correct_answer: Any
    feedback_correct: str
    feedback_incorrect: str
    hints: List[str]
    related_concepts: List[str]
```

---

## 5. API Design

### 5.1 Scene Creation API

```python
from sciviz_edu import EducationalScene, LearningObjective
from sciviz_edu.templates.networks import BiologicalNetwork

class MycorrhizalNetworkLesson(EducationalScene):
    def setup_objectives(self):
        self.add_objective(
            LearningObjective(
                description="Understand nutrient flow in mycorrhizal networks",
                bloom_level=BloomLevel.UNDERSTAND,
                assessment_method="interactive_simulation"
            )
        )
    
    def construct(self):
        # Create network
        network = BiologicalNetwork(
            nodes=self.create_trees(count=5),
            edges=self.create_hyphae(),
            node_labels=True
        )
        
        # Add narrative
        self.narrate([
            (0, 5, "Mycorrhizal fungi connect trees underground..."),
            (5, 10, "Nutrients flow through these connections...")
        ])
        
        # Add interactivity
        self.add_slider(
            name="nutrient_flow",
            range=(0, 100),
            default=50,
            callback=self.update_flow,
            label="Nutrient Flow Rate"
        )
        
        # Add assessment
        self.add_checkpoint(
            timestamp=15,
            question="What happens when you increase nutrient flow?",
            correct="Trees grow faster and network expands",
            feedback_correct="Correct! Higher flow rates support more growth."
        )
        
        # Animate
        self.play(Create(network))
        self.wait_for_interaction()
```

### 5.2 Template API

```python
from sciviz_edu.templates.networks import create_network_template

# Simple high-level API
network_scene = create_network_template(
    type="biological",
    nodes=5,
    connectivity=0.7,
    flow_visualization=True,
    interactive=True,
    learning_objectives=[
        "Understand network topology",
        "Observe flow dynamics"
    ]
)
```

---

## 6. Interactive Web Export

### 6.1 Architecture

```
┌─────────────────────────────────────────┐
│         Browser (Client)                │
│                                          │
│  ┌────────────────────────────────┐    │
│  │      React Application          │    │
│  │  ┌──────────┐  ┌──────────┐   │    │
│  │  │ Canvas/  │  │ Controls │   │    │
│  │  │ Three.js │  │  Panel   │   │    │
│  │  └──────────┘  └──────────┘   │    │
│  │  ┌──────────┐  ┌──────────┐   │    │
│  │  │ Timeline │  │  Quiz    │   │    │
│  │  └──────────┘  └──────────┘   │    │
│  └────────────────────────────────┘    │
│           │         ▲                   │
│           │         │                   │
│           ▼         │                   │
│  ┌────────────────────────────────┐    │
│  │   State Management (Redux)     │    │
│  └────────────────────────────────┘    │
└─────────────────────────────────────────┘
           │         ▲
           │ WebSocket│
           ▼         │
┌─────────────────────────────────────────┐
│      FastAPI Backend (Optional)         │
│                                          │
│  - Real-time state sync                 │
│  - Analytics collection                 │
│  - Multi-user collaboration             │
└─────────────────────────────────────────┘
```

### 6.2 Export Process

```python
# Export to interactive web
scene.export(
    format="web",
    output_dir="./output",
    include_controls=True,
    enable_analytics=True,
    standalone=True  # Self-contained HTML file
)
```

---

## 7. Assessment Framework

### 7.1 Question Types

```python
class QuestionType(Enum):
    MULTIPLE_CHOICE = "mc"
    TRUE_FALSE = "tf"
    SHORT_ANSWER = "sa"
    NUMERIC = "num"
    INTERACTIVE = "int"  # Requires manipulation
    DRAWING = "draw"
```

### 7.2 Adaptive Difficulty

```python
class AdaptiveDifficulty:
    """Adjusts difficulty based on student performance"""
    
    def __init__(self, initial_level: DifficultyLevel):
        self.current_level = initial_level
        self.performance_history = []
    
    def update(self, correct: bool, time_taken: float):
        """Adjust difficulty based on response"""
        self.performance_history.append((correct, time_taken))
        
        # If last 3 correct and fast → increase difficulty
        if self._should_increase_difficulty():
            self.current_level = self.current_level.next()
        
        # If last 3 incorrect → decrease difficulty
        elif self._should_decrease_difficulty():
            self.current_level = self.current_level.previous()
```

---

## 8. Knowledge Graph Integration

### 8.1 Concept Representation

```python
class Concept:
    """Represents a scientific concept"""
    
    id: str
    name: str
    definition: str
    examples: List[str]
    prerequisites: List['Concept']
    related: List['Concept']
    difficulty: DifficultyLevel
    bloom_level: BloomLevel
```

### 8.2 Learning Path Optimization

```python
class LearningPathOptimizer:
    """Optimizes learning sequence based on student needs"""
    
    def __init__(self, knowledge_graph: KnowledgeGraph):
        self.graph = knowledge_graph
    
    def generate_path(
        self,
        target_concepts: List[Concept],
        student_state: StudentState
    ) -> LearningPath:
        """
        Generate optimal learning path using:
        - Topological sort (prerequisites)
        - Difficulty progression
        - Student's current knowledge
        - Estimated time constraints
        """
        pass
```

---

## 9. Analytics & Metrics

### 9.1 Tracked Metrics

- **Engagement**: Time on scene, interactions per minute
- **Comprehension**: Quiz scores, concept mastery
- **Progression**: Concepts learned, path completion
- **Difficulty**: Challenge level vs. success rate
- **Social**: Collaboration metrics (if enabled)

### 9.2 Educator Dashboard

```
┌─────────────────────────────────────────┐
│         Class Analytics                 │
├─────────────────────────────────────────┤
│                                          │
│  Average Completion: 87%                │
│  Average Quiz Score: 82%                │
│                                          │
│  ┌────────────────────────────────┐    │
│  │  Concept Mastery Heatmap       │    │
│  │                                 │    │
│  │  [Green][Green][Yellow][Red]   │    │
│  │                                 │    │
│  └────────────────────────────────┘    │
│                                          │
│  Struggling Students: 3                 │
│  - Student A: Stuck on Concept X        │
│  - Student B: Low engagement            │
│                                          │
└─────────────────────────────────────────┘
```

---

## 10. Performance Optimization

### 10.1 Rendering Optimization
- Scene caching
- Progressive loading
- Level-of-detail (LOD) for complex visuals
- GPU acceleration for particle systems

### 10.2 Interactive Optimization
- Web Workers for heavy computation
- RequestAnimationFrame for smooth 60fps
- State batching to minimize re-renders
- Lazy loading for large datasets

---

## 11. Extensibility

### 11.1 Plugin System

```python
from sciviz_edu.plugins import Plugin

class CustomPhysicsEngine(Plugin):
    """Custom physics simulation plugin"""
    
    def register(self):
        # Register new template types
        self.register_template("custom_physics", CustomPhysicsTemplate)
        
        # Register new interactive elements
        self.register_control("physics_control", PhysicsControl)
        
        # Register new assessment types
        self.register_question_type("simulation_based", SimulationQuestion)
```

### 11.2 Custom Templates

```python
from sciviz_edu.templates import TemplateBase

class MyCustomTemplate(TemplateBase):
    """User-defined educational template"""
    
    def setup_defaults(self):
        self.set_color_scheme("custom_palette")
        self.set_difficulty(DifficultyLevel.INTERMEDIATE)
    
    def construct_visuals(self):
        # Custom visualization logic
        pass
    
    def setup_interactions(self):
        # Custom interactivity
        pass
```

---

## 12. Deployment Options

### 12.1 Standalone Deployment
- Single HTML file with embedded assets
- No server required
- Local analytics (localStorage)

### 12.2 LMS Integration
- SCORM 1.2/2004 compatible
- xAPI (Tin Can) support
- Grade passback

### 12.3 Cloud Deployment
- Docker containers
- Kubernetes orchestration
- Multi-tenant support
- Centralized analytics

---

## 13. Development Roadmap

### Phase 1: Core Framework (Months 1-2)
- [ ] Manim++ engine with educational templates
- [ ] Basic interactive web export
- [ ] Simple assessment framework
- [ ] Example: Mycorrhizal networks

### Phase 2: Advanced Features (Month 3)
- [ ] Knowledge graph integration
- [ ] Adaptive difficulty
- [ ] Analytics dashboard
- [ ] Example: Neural networks

### Phase 3: Ecosystem & Documentation (Month 4)
- [ ] Plugin system
- [ ] Comprehensive documentation
- [ ] Video tutorials
- [ ] Example: Particle physics

### Phase 4: Testing & Release (Month 5)
- [ ] Beta testing with educators
- [ ] Performance optimization
- [ ] JOSE paper writing
- [ ] v1.0 release

---

## 14. Success Metrics

### 14.1 Technical Metrics
- Render time < 2min per minute of content
- Interactive frame rate ≥ 60fps
- Export size < 5MB per module
- Load time < 3s

### 14.2 Educational Metrics
- Learning gain (pre/post test) ≥ 25%
- Student engagement time ≥ 80% of content
- Quiz completion rate ≥ 90%
- Educator adoption in ≥ 10 institutions

### 14.3 Community Metrics
- ≥ 100 GitHub stars in first 6 months
- ≥ 20 community contributions
- ≥ 50 educational modules created by others
- Active Discord/forum community

---

## 15. License & Governance

- **License**: MIT (permissive, education-friendly)
- **Code of Conduct**: Contributor Covenant
- **Governance**: Benevolent dictator (Noah) → steering committee
- **Contribution**: Standard PR workflow with CI/CD checks

---

## 16. Related Work & Differentiation

### Existing Tools
- **Manim**: Static animations, no interactivity/assessment
- **p5.js**: Interactive but not educational-first
- **PhET**: Interactive but domain-specific, proprietary platform
- **GeoGebra**: Math-focused, limited to specific domains

### SciViz-Edu Advantages
✓ Combines animation + interactivity + assessment
✓ Multi-domain (physics, chemistry, biology, math)
✓ Open-source and extensible
✓ Export to multiple formats
✓ Built-in pedagogical framework
✓ Modern web technologies

---

## 17. Support & Community

- **Documentation**: https://sciviz-edu.readthedocs.io
- **GitHub**: https://github.com/GuiloScion/sciviz-edu
- **Discord**: Community discussion and support
- **YouTube**: Video tutorials and showcases
- **Blog**: Development updates and best practices

---

**Document Version**: 1.0
**Last Updated**: January 2025
**Author**: Noah Parsons
**Contact**: nomapa223@gmail.com